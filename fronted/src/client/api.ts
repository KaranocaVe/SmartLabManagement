/* tslint:disable */
/* eslint-disable */
/**
 * 智能实验室运行及管理平台 API 文档
 * 本文档提供了平台后端所有可用的 RESTful API 接口。
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddProjectMemberDTO
 */
export interface AddProjectMemberDTO {
    /**
     * 
     * @type {number}
     * @memberof AddProjectMemberDTO
     */
    'projectId': number;
    /**
     * 
     * @type {number}
     * @memberof AddProjectMemberDTO
     */
    'userId': number;
    /**
     * 
     * @type {string}
     * @memberof AddProjectMemberDTO
     */
    'roleInProject': string;
}
/**
 * 
 * @export
 * @interface ApiResponseAttachmentVO
 */
export interface ApiResponseAttachmentVO {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseAttachmentVO
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseAttachmentVO
     */
    'message'?: string;
    /**
     * 
     * @type {AttachmentVO}
     * @memberof ApiResponseAttachmentVO
     */
    'data'?: AttachmentVO;
}
/**
 * 
 * @export
 * @interface ApiResponseEquipment
 */
export interface ApiResponseEquipment {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseEquipment
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseEquipment
     */
    'message'?: string;
    /**
     * 
     * @type {Equipment}
     * @memberof ApiResponseEquipment
     */
    'data'?: Equipment;
}
/**
 * 
 * @export
 * @interface ApiResponseExperimentRecord
 */
export interface ApiResponseExperimentRecord {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseExperimentRecord
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseExperimentRecord
     */
    'message'?: string;
    /**
     * 
     * @type {ExperimentRecord}
     * @memberof ApiResponseExperimentRecord
     */
    'data'?: ExperimentRecord;
}
/**
 * 
 * @export
 * @interface ApiResponseExperimentReportVO
 */
export interface ApiResponseExperimentReportVO {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseExperimentReportVO
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseExperimentReportVO
     */
    'message'?: string;
    /**
     * 
     * @type {ExperimentReportVO}
     * @memberof ApiResponseExperimentReportVO
     */
    'data'?: ExperimentReportVO;
}
/**
 * 
 * @export
 * @interface ApiResponseIPageEquipment
 */
export interface ApiResponseIPageEquipment {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseIPageEquipment
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseIPageEquipment
     */
    'message'?: string;
    /**
     * 
     * @type {IPageEquipment}
     * @memberof ApiResponseIPageEquipment
     */
    'data'?: IPageEquipment;
}
/**
 * 
 * @export
 * @interface ApiResponseIPageExperimentRecord
 */
export interface ApiResponseIPageExperimentRecord {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseIPageExperimentRecord
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseIPageExperimentRecord
     */
    'message'?: string;
    /**
     * 
     * @type {IPageExperimentRecord}
     * @memberof ApiResponseIPageExperimentRecord
     */
    'data'?: IPageExperimentRecord;
}
/**
 * 
 * @export
 * @interface ApiResponseIPageLab
 */
export interface ApiResponseIPageLab {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseIPageLab
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseIPageLab
     */
    'message'?: string;
    /**
     * 
     * @type {IPageLab}
     * @memberof ApiResponseIPageLab
     */
    'data'?: IPageLab;
}
/**
 * 
 * @export
 * @interface ApiResponseIPageMaterial
 */
export interface ApiResponseIPageMaterial {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseIPageMaterial
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseIPageMaterial
     */
    'message'?: string;
    /**
     * 
     * @type {IPageMaterial}
     * @memberof ApiResponseIPageMaterial
     */
    'data'?: IPageMaterial;
}
/**
 * 
 * @export
 * @interface ApiResponseIPageProjectVO
 */
export interface ApiResponseIPageProjectVO {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseIPageProjectVO
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseIPageProjectVO
     */
    'message'?: string;
    /**
     * 
     * @type {IPageProjectVO}
     * @memberof ApiResponseIPageProjectVO
     */
    'data'?: IPageProjectVO;
}
/**
 * 
 * @export
 * @interface ApiResponseIPageResourceRequestVO
 */
export interface ApiResponseIPageResourceRequestVO {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseIPageResourceRequestVO
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseIPageResourceRequestVO
     */
    'message'?: string;
    /**
     * 
     * @type {IPageResourceRequestVO}
     * @memberof ApiResponseIPageResourceRequestVO
     */
    'data'?: IPageResourceRequestVO;
}
/**
 * 
 * @export
 * @interface ApiResponseIPageSafetyIncidentVO
 */
export interface ApiResponseIPageSafetyIncidentVO {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseIPageSafetyIncidentVO
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseIPageSafetyIncidentVO
     */
    'message'?: string;
    /**
     * 
     * @type {IPageSafetyIncidentVO}
     * @memberof ApiResponseIPageSafetyIncidentVO
     */
    'data'?: IPageSafetyIncidentVO;
}
/**
 * 
 * @export
 * @interface ApiResponseIPageSupplier
 */
export interface ApiResponseIPageSupplier {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseIPageSupplier
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseIPageSupplier
     */
    'message'?: string;
    /**
     * 
     * @type {IPageSupplier}
     * @memberof ApiResponseIPageSupplier
     */
    'data'?: IPageSupplier;
}
/**
 * 
 * @export
 * @interface ApiResponseIPageUserVO
 */
export interface ApiResponseIPageUserVO {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseIPageUserVO
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseIPageUserVO
     */
    'message'?: string;
    /**
     * 
     * @type {IPageUserVO}
     * @memberof ApiResponseIPageUserVO
     */
    'data'?: IPageUserVO;
}
/**
 * 
 * @export
 * @interface ApiResponseLab
 */
export interface ApiResponseLab {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseLab
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseLab
     */
    'message'?: string;
    /**
     * 
     * @type {Lab}
     * @memberof ApiResponseLab
     */
    'data'?: Lab;
}
/**
 * 
 * @export
 * @interface ApiResponseListPermission
 */
export interface ApiResponseListPermission {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseListPermission
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseListPermission
     */
    'message'?: string;
    /**
     * 
     * @type {Array<Permission>}
     * @memberof ApiResponseListPermission
     */
    'data'?: Array<Permission>;
}
/**
 * 
 * @export
 * @interface ApiResponseListProjectTask
 */
export interface ApiResponseListProjectTask {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseListProjectTask
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseListProjectTask
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProjectTask>}
     * @memberof ApiResponseListProjectTask
     */
    'data'?: Array<ProjectTask>;
}
/**
 * 
 * @export
 * @interface ApiResponseListRiskAssessmentVO
 */
export interface ApiResponseListRiskAssessmentVO {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseListRiskAssessmentVO
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseListRiskAssessmentVO
     */
    'message'?: string;
    /**
     * 
     * @type {Array<RiskAssessmentVO>}
     * @memberof ApiResponseListRiskAssessmentVO
     */
    'data'?: Array<RiskAssessmentVO>;
}
/**
 * 
 * @export
 * @interface ApiResponseListRole
 */
export interface ApiResponseListRole {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseListRole
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseListRole
     */
    'message'?: string;
    /**
     * 
     * @type {Array<Role>}
     * @memberof ApiResponseListRole
     */
    'data'?: Array<Role>;
}
/**
 * 
 * @export
 * @interface ApiResponseLoginResponseVO
 */
export interface ApiResponseLoginResponseVO {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseLoginResponseVO
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseLoginResponseVO
     */
    'message'?: string;
    /**
     * 
     * @type {LoginResponseVO}
     * @memberof ApiResponseLoginResponseVO
     */
    'data'?: LoginResponseVO;
}
/**
 * 
 * @export
 * @interface ApiResponseMaterial
 */
export interface ApiResponseMaterial {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseMaterial
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseMaterial
     */
    'message'?: string;
    /**
     * 
     * @type {Material}
     * @memberof ApiResponseMaterial
     */
    'data'?: Material;
}
/**
 * 
 * @export
 * @interface ApiResponseObject
 */
export interface ApiResponseObject {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseObject
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseObject
     */
    'message'?: string;
    /**
     * 
     * @type {any}
     * @memberof ApiResponseObject
     */
    'data'?: any;
}
/**
 * 
 * @export
 * @interface ApiResponseProjectTask
 */
export interface ApiResponseProjectTask {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseProjectTask
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseProjectTask
     */
    'message'?: string;
    /**
     * 
     * @type {ProjectTask}
     * @memberof ApiResponseProjectTask
     */
    'data'?: ProjectTask;
}
/**
 * 
 * @export
 * @interface ApiResponseProjectVO
 */
export interface ApiResponseProjectVO {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseProjectVO
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseProjectVO
     */
    'message'?: string;
    /**
     * 
     * @type {ProjectVO}
     * @memberof ApiResponseProjectVO
     */
    'data'?: ProjectVO;
}
/**
 * 
 * @export
 * @interface ApiResponseResourceRequestVO
 */
export interface ApiResponseResourceRequestVO {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseResourceRequestVO
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseResourceRequestVO
     */
    'message'?: string;
    /**
     * 
     * @type {ResourceRequestVO}
     * @memberof ApiResponseResourceRequestVO
     */
    'data'?: ResourceRequestVO;
}
/**
 * 
 * @export
 * @interface ApiResponseRiskAssessmentVO
 */
export interface ApiResponseRiskAssessmentVO {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseRiskAssessmentVO
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseRiskAssessmentVO
     */
    'message'?: string;
    /**
     * 
     * @type {RiskAssessmentVO}
     * @memberof ApiResponseRiskAssessmentVO
     */
    'data'?: RiskAssessmentVO;
}
/**
 * 
 * @export
 * @interface ApiResponseRole
 */
export interface ApiResponseRole {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseRole
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseRole
     */
    'message'?: string;
    /**
     * 
     * @type {Role}
     * @memberof ApiResponseRole
     */
    'data'?: Role;
}
/**
 * 
 * @export
 * @interface ApiResponseSafetyIncidentVO
 */
export interface ApiResponseSafetyIncidentVO {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseSafetyIncidentVO
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseSafetyIncidentVO
     */
    'message'?: string;
    /**
     * 
     * @type {SafetyIncidentVO}
     * @memberof ApiResponseSafetyIncidentVO
     */
    'data'?: SafetyIncidentVO;
}
/**
 * 
 * @export
 * @interface ApiResponseSupplier
 */
export interface ApiResponseSupplier {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseSupplier
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseSupplier
     */
    'message'?: string;
    /**
     * 
     * @type {Supplier}
     * @memberof ApiResponseSupplier
     */
    'data'?: Supplier;
}
/**
 * 
 * @export
 * @interface ApiResponseUserVO
 */
export interface ApiResponseUserVO {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseUserVO
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseUserVO
     */
    'message'?: string;
    /**
     * 
     * @type {UserVO}
     * @memberof ApiResponseUserVO
     */
    'data'?: UserVO;
}
/**
 * 
 * @export
 * @interface ApiResponseVoid
 */
export interface ApiResponseVoid {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseVoid
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseVoid
     */
    'message'?: string;
    /**
     * 
     * @type {any}
     * @memberof ApiResponseVoid
     */
    'data'?: any;
}
/**
 * 
 * @export
 * @interface AssignPermissionsToRoleDTO
 */
export interface AssignPermissionsToRoleDTO {
    /**
     * 
     * @type {number}
     * @memberof AssignPermissionsToRoleDTO
     */
    'roleId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof AssignPermissionsToRoleDTO
     */
    'permissionIds'?: Array<number>;
}
/**
 * 
 * @export
 * @interface AssignRolesToUserDTO
 */
export interface AssignRolesToUserDTO {
    /**
     * 
     * @type {number}
     * @memberof AssignRolesToUserDTO
     */
    'userId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof AssignRolesToUserDTO
     */
    'roleIds'?: Array<number>;
}
/**
 * 
 * @export
 * @interface AttachmentVO
 */
export interface AttachmentVO {
    /**
     * 
     * @type {number}
     * @memberof AttachmentVO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AttachmentVO
     */
    'fileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AttachmentVO
     */
    'filePath'?: string;
    /**
     * 
     * @type {string}
     * @memberof AttachmentVO
     */
    'fileType'?: string;
    /**
     * 
     * @type {number}
     * @memberof AttachmentVO
     */
    'fileSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof AttachmentVO
     */
    'uploaderId'?: number;
    /**
     * 
     * @type {string}
     * @memberof AttachmentVO
     */
    'uploaderName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AttachmentVO
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface Equipment
 */
export interface Equipment {
    /**
     * 
     * @type {number}
     * @memberof Equipment
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'assetNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'model'?: string;
    /**
     * 
     * @type {number}
     * @memberof Equipment
     */
    'labId'?: number;
    /**
     * 
     * @type {number}
     * @memberof Equipment
     */
    'supplierId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'purchaseDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'status'?: string;
    /**
     * 
     * @type {number}
     * @memberof Equipment
     */
    'maintenanceCycleDays'?: number;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'nextMaintenanceDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface EquipmentCreateDTO
 */
export interface EquipmentCreateDTO {
    /**
     * 
     * @type {string}
     * @memberof EquipmentCreateDTO
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentCreateDTO
     */
    'assetNumber': string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentCreateDTO
     */
    'model'?: string;
    /**
     * 
     * @type {number}
     * @memberof EquipmentCreateDTO
     */
    'labId'?: number;
    /**
     * 
     * @type {number}
     * @memberof EquipmentCreateDTO
     */
    'supplierId'?: number;
    /**
     * 
     * @type {string}
     * @memberof EquipmentCreateDTO
     */
    'purchaseDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof EquipmentCreateDTO
     */
    'maintenanceCycleDays'?: number;
}
/**
 * 
 * @export
 * @interface ExperimentRecord
 */
export interface ExperimentRecord {
    /**
     * 
     * @type {number}
     * @memberof ExperimentRecord
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ExperimentRecord
     */
    'projectId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ExperimentRecord
     */
    'taskId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ExperimentRecord
     */
    'userId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExperimentRecord
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentRecord
     */
    'structuredData'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentRecord
     */
    'recordTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentRecord
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentRecord
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface ExperimentRecordCreateDTO
 */
export interface ExperimentRecordCreateDTO {
    /**
     * 
     * @type {number}
     * @memberof ExperimentRecordCreateDTO
     */
    'projectId': number;
    /**
     * 
     * @type {number}
     * @memberof ExperimentRecordCreateDTO
     */
    'taskId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExperimentRecordCreateDTO
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentRecordCreateDTO
     */
    'structuredData'?: string;
}
/**
 * 
 * @export
 * @interface ExperimentReportCreateDTO
 */
export interface ExperimentReportCreateDTO {
    /**
     * 
     * @type {number}
     * @memberof ExperimentReportCreateDTO
     */
    'projectId': number;
    /**
     * 
     * @type {string}
     * @memberof ExperimentReportCreateDTO
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentReportCreateDTO
     */
    'initialContent': string;
}
/**
 * 
 * @export
 * @interface ExperimentReportVO
 */
export interface ExperimentReportVO {
    /**
     * 
     * @type {number}
     * @memberof ExperimentReportVO
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ExperimentReportVO
     */
    'projectId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExperimentReportVO
     */
    'title'?: string;
    /**
     * 
     * @type {number}
     * @memberof ExperimentReportVO
     */
    'authorId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExperimentReportVO
     */
    'authorName'?: string;
    /**
     * 
     * @type {number}
     * @memberof ExperimentReportVO
     */
    'currentVersionId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExperimentReportVO
     */
    'currentVersionContent'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentReportVO
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentReportVO
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentReportVO
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface IPageEquipment
 */
export interface IPageEquipment {
    /**
     * 
     * @type {number}
     * @memberof IPageEquipment
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof IPageEquipment
     */
    'current'?: number;
    /**
     * 
     * @type {Array<Equipment>}
     * @memberof IPageEquipment
     */
    'records'?: Array<Equipment>;
    /**
     * 
     * @type {number}
     * @memberof IPageEquipment
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof IPageEquipment
     * @deprecated
     */
    'pages'?: number;
}
/**
 * 
 * @export
 * @interface IPageExperimentRecord
 */
export interface IPageExperimentRecord {
    /**
     * 
     * @type {number}
     * @memberof IPageExperimentRecord
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof IPageExperimentRecord
     */
    'current'?: number;
    /**
     * 
     * @type {Array<ExperimentRecord>}
     * @memberof IPageExperimentRecord
     */
    'records'?: Array<ExperimentRecord>;
    /**
     * 
     * @type {number}
     * @memberof IPageExperimentRecord
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof IPageExperimentRecord
     * @deprecated
     */
    'pages'?: number;
}
/**
 * 
 * @export
 * @interface IPageLab
 */
export interface IPageLab {
    /**
     * 
     * @type {number}
     * @memberof IPageLab
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof IPageLab
     */
    'current'?: number;
    /**
     * 
     * @type {Array<Lab>}
     * @memberof IPageLab
     */
    'records'?: Array<Lab>;
    /**
     * 
     * @type {number}
     * @memberof IPageLab
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof IPageLab
     * @deprecated
     */
    'pages'?: number;
}
/**
 * 
 * @export
 * @interface IPageMaterial
 */
export interface IPageMaterial {
    /**
     * 
     * @type {number}
     * @memberof IPageMaterial
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof IPageMaterial
     */
    'current'?: number;
    /**
     * 
     * @type {Array<Material>}
     * @memberof IPageMaterial
     */
    'records'?: Array<Material>;
    /**
     * 
     * @type {number}
     * @memberof IPageMaterial
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof IPageMaterial
     * @deprecated
     */
    'pages'?: number;
}
/**
 * 
 * @export
 * @interface IPageProjectVO
 */
export interface IPageProjectVO {
    /**
     * 
     * @type {number}
     * @memberof IPageProjectVO
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof IPageProjectVO
     */
    'current'?: number;
    /**
     * 
     * @type {Array<ProjectVO>}
     * @memberof IPageProjectVO
     */
    'records'?: Array<ProjectVO>;
    /**
     * 
     * @type {number}
     * @memberof IPageProjectVO
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof IPageProjectVO
     * @deprecated
     */
    'pages'?: number;
}
/**
 * 
 * @export
 * @interface IPageResourceRequestVO
 */
export interface IPageResourceRequestVO {
    /**
     * 
     * @type {number}
     * @memberof IPageResourceRequestVO
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof IPageResourceRequestVO
     */
    'current'?: number;
    /**
     * 
     * @type {Array<ResourceRequestVO>}
     * @memberof IPageResourceRequestVO
     */
    'records'?: Array<ResourceRequestVO>;
    /**
     * 
     * @type {number}
     * @memberof IPageResourceRequestVO
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof IPageResourceRequestVO
     * @deprecated
     */
    'pages'?: number;
}
/**
 * 
 * @export
 * @interface IPageSafetyIncidentVO
 */
export interface IPageSafetyIncidentVO {
    /**
     * 
     * @type {number}
     * @memberof IPageSafetyIncidentVO
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof IPageSafetyIncidentVO
     */
    'current'?: number;
    /**
     * 
     * @type {Array<SafetyIncidentVO>}
     * @memberof IPageSafetyIncidentVO
     */
    'records'?: Array<SafetyIncidentVO>;
    /**
     * 
     * @type {number}
     * @memberof IPageSafetyIncidentVO
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof IPageSafetyIncidentVO
     * @deprecated
     */
    'pages'?: number;
}
/**
 * 
 * @export
 * @interface IPageSupplier
 */
export interface IPageSupplier {
    /**
     * 
     * @type {number}
     * @memberof IPageSupplier
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof IPageSupplier
     */
    'current'?: number;
    /**
     * 
     * @type {Array<Supplier>}
     * @memberof IPageSupplier
     */
    'records'?: Array<Supplier>;
    /**
     * 
     * @type {number}
     * @memberof IPageSupplier
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof IPageSupplier
     * @deprecated
     */
    'pages'?: number;
}
/**
 * 
 * @export
 * @interface IPageUserVO
 */
export interface IPageUserVO {
    /**
     * 
     * @type {number}
     * @memberof IPageUserVO
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof IPageUserVO
     */
    'current'?: number;
    /**
     * 
     * @type {Array<UserVO>}
     * @memberof IPageUserVO
     */
    'records'?: Array<UserVO>;
    /**
     * 
     * @type {number}
     * @memberof IPageUserVO
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof IPageUserVO
     * @deprecated
     */
    'pages'?: number;
}
/**
 * 
 * @export
 * @interface Lab
 */
export interface Lab {
    /**
     * 
     * @type {number}
     * @memberof Lab
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Lab
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Lab
     */
    'location'?: string;
    /**
     * 
     * @type {string}
     * @memberof Lab
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof Lab
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Lab
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface LoginRequestDTO
 */
export interface LoginRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof LoginRequestDTO
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequestDTO
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginResponseVO
 */
export interface LoginResponseVO {
    /**
     * 
     * @type {string}
     * @memberof LoginResponseVO
     */
    'accessToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseVO
     */
    'tokenType'?: string;
}
/**
 * 
 * @export
 * @interface Material
 */
export interface Material {
    /**
     * 
     * @type {number}
     * @memberof Material
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Material
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Material
     */
    'specification'?: string;
    /**
     * 
     * @type {string}
     * @memberof Material
     */
    'unit'?: string;
    /**
     * 
     * @type {number}
     * @memberof Material
     */
    'currentStock'?: number;
    /**
     * 
     * @type {number}
     * @memberof Material
     */
    'lowStockThreshold'?: number;
    /**
     * 
     * @type {string}
     * @memberof Material
     */
    'storageLocation'?: string;
    /**
     * 
     * @type {string}
     * @memberof Material
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Material
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface MaterialStockAdjustDTO
 */
export interface MaterialStockAdjustDTO {
    /**
     * 
     * @type {number}
     * @memberof MaterialStockAdjustDTO
     */
    'materialId': number;
    /**
     * 
     * @type {string}
     * @memberof MaterialStockAdjustDTO
     */
    'movementType': string;
    /**
     * 
     * @type {number}
     * @memberof MaterialStockAdjustDTO
     */
    'quantityChange': number;
    /**
     * 
     * @type {string}
     * @memberof MaterialStockAdjustDTO
     */
    'reason'?: string;
}
/**
 * 
 * @export
 * @interface PageRequestDTO
 */
export interface PageRequestDTO {
    /**
     * 
     * @type {number}
     * @memberof PageRequestDTO
     */
    'pageNum'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageRequestDTO
     */
    'pageSize'?: number;
}
/**
 * 
 * @export
 * @interface Permission
 */
export interface Permission {
    /**
     * 
     * @type {number}
     * @memberof Permission
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Permission
     */
    'permissionCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Permission
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Permission
     */
    'module'?: string;
}
/**
 * 
 * @export
 * @interface ProjectCreateDTO
 */
export interface ProjectCreateDTO {
    /**
     * 
     * @type {string}
     * @memberof ProjectCreateDTO
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ProjectCreateDTO
     */
    'projectLeadId': number;
    /**
     * 
     * @type {string}
     * @memberof ProjectCreateDTO
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectCreateDTO
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectCreateDTO
     */
    'endDate'?: string;
}
/**
 * 
 * @export
 * @interface ProjectMemberVO
 */
export interface ProjectMemberVO {
    /**
     * 
     * @type {number}
     * @memberof ProjectMemberVO
     */
    'userId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProjectMemberVO
     */
    'realName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectMemberVO
     */
    'roleInProject'?: string;
}
/**
 * 
 * @export
 * @interface ProjectTask
 */
export interface ProjectTask {
    /**
     * 
     * @type {number}
     * @memberof ProjectTask
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProjectTask
     */
    'projectId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProjectTask
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectTask
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProjectTask
     */
    'assignedToUserId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProjectTask
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectTask
     */
    'dueDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectTask
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectTask
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface ProjectTaskCreateDTO
 */
export interface ProjectTaskCreateDTO {
    /**
     * 
     * @type {number}
     * @memberof ProjectTaskCreateDTO
     */
    'projectId': number;
    /**
     * 
     * @type {string}
     * @memberof ProjectTaskCreateDTO
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectTaskCreateDTO
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProjectTaskCreateDTO
     */
    'assignedToUserId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProjectTaskCreateDTO
     */
    'dueDate'?: string;
}
/**
 * 
 * @export
 * @interface ProjectTaskUpdateDTO
 */
export interface ProjectTaskUpdateDTO {
    /**
     * 
     * @type {string}
     * @memberof ProjectTaskUpdateDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectTaskUpdateDTO
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProjectTaskUpdateDTO
     */
    'assignedToUserId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProjectTaskUpdateDTO
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectTaskUpdateDTO
     */
    'dueDate'?: string;
}
/**
 * 
 * @export
 * @interface ProjectUpdateDTO
 */
export interface ProjectUpdateDTO {
    /**
     * 
     * @type {number}
     * @memberof ProjectUpdateDTO
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ProjectUpdateDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectUpdateDTO
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProjectUpdateDTO
     */
    'projectLeadId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProjectUpdateDTO
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectUpdateDTO
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectUpdateDTO
     */
    'endDate'?: string;
}
/**
 * 
 * @export
 * @interface ProjectVO
 */
export interface ProjectVO {
    /**
     * 
     * @type {number}
     * @memberof ProjectVO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProjectVO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectVO
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProjectVO
     */
    'projectLeadId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProjectVO
     */
    'projectLeadName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectVO
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectVO
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectVO
     */
    'endDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectVO
     */
    'createdAt'?: string;
    /**
     * 
     * @type {Array<ProjectMemberVO>}
     * @memberof ProjectVO
     */
    'members'?: Array<ProjectMemberVO>;
}
/**
 * 
 * @export
 * @interface ReportVersionCreateDTO
 */
export interface ReportVersionCreateDTO {
    /**
     * 
     * @type {string}
     * @memberof ReportVersionCreateDTO
     */
    'content': string;
}
/**
 * 
 * @export
 * @interface ResourceRequestApproveDTO
 */
export interface ResourceRequestApproveDTO {
    /**
     * 
     * @type {number}
     * @memberof ResourceRequestApproveDTO
     */
    'requestId': number;
    /**
     * 
     * @type {string}
     * @memberof ResourceRequestApproveDTO
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof ResourceRequestApproveDTO
     */
    'approvalNotes'?: string;
}
/**
 * 
 * @export
 * @interface ResourceRequestCreateDTO
 */
export interface ResourceRequestCreateDTO {
    /**
     * 
     * @type {string}
     * @memberof ResourceRequestCreateDTO
     */
    'requestType': string;
    /**
     * 
     * @type {number}
     * @memberof ResourceRequestCreateDTO
     */
    'resourceId': number;
    /**
     * 
     * @type {number}
     * @memberof ResourceRequestCreateDTO
     */
    'quantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResourceRequestCreateDTO
     */
    'startTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceRequestCreateDTO
     */
    'endTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceRequestCreateDTO
     */
    'purpose'?: string;
}
/**
 * 
 * @export
 * @interface ResourceRequestQueryDTO
 */
export interface ResourceRequestQueryDTO {
    /**
     * 
     * @type {number}
     * @memberof ResourceRequestQueryDTO
     */
    'pageNum'?: number;
    /**
     * 
     * @type {number}
     * @memberof ResourceRequestQueryDTO
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResourceRequestQueryDTO
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceRequestQueryDTO
     */
    'requestType'?: string;
}
/**
 * 
 * @export
 * @interface ResourceRequestVO
 */
export interface ResourceRequestVO {
    /**
     * 
     * @type {number}
     * @memberof ResourceRequestVO
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ResourceRequestVO
     */
    'userId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResourceRequestVO
     */
    'applicantName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceRequestVO
     */
    'requestType'?: string;
    /**
     * 
     * @type {number}
     * @memberof ResourceRequestVO
     */
    'resourceId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResourceRequestVO
     */
    'resourceName'?: string;
    /**
     * 
     * @type {number}
     * @memberof ResourceRequestVO
     */
    'quantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResourceRequestVO
     */
    'startTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceRequestVO
     */
    'endTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceRequestVO
     */
    'purpose'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceRequestVO
     */
    'status'?: string;
    /**
     * 
     * @type {number}
     * @memberof ResourceRequestVO
     */
    'approverId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResourceRequestVO
     */
    'approverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceRequestVO
     */
    'approvalNotes'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceRequestVO
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface RiskAssessmentCreateDTO
 */
export interface RiskAssessmentCreateDTO {
    /**
     * 
     * @type {number}
     * @memberof RiskAssessmentCreateDTO
     */
    'projectId': number;
    /**
     * 
     * @type {string}
     * @memberof RiskAssessmentCreateDTO
     */
    'riskLevel': string;
    /**
     * 
     * @type {string}
     * @memberof RiskAssessmentCreateDTO
     */
    'identifiedRisks': string;
    /**
     * 
     * @type {string}
     * @memberof RiskAssessmentCreateDTO
     */
    'protectiveMeasures': string;
    /**
     * 
     * @type {string}
     * @memberof RiskAssessmentCreateDTO
     */
    'assessmentDate': string;
}
/**
 * 
 * @export
 * @interface RiskAssessmentVO
 */
export interface RiskAssessmentVO {
    /**
     * 
     * @type {number}
     * @memberof RiskAssessmentVO
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RiskAssessmentVO
     */
    'projectId'?: number;
    /**
     * 
     * @type {number}
     * @memberof RiskAssessmentVO
     */
    'assessedByUserId'?: number;
    /**
     * 
     * @type {string}
     * @memberof RiskAssessmentVO
     */
    'assessedByUserName'?: string;
    /**
     * 
     * @type {string}
     * @memberof RiskAssessmentVO
     */
    'riskLevel'?: string;
    /**
     * 
     * @type {string}
     * @memberof RiskAssessmentVO
     */
    'identifiedRisks'?: string;
    /**
     * 
     * @type {string}
     * @memberof RiskAssessmentVO
     */
    'protectiveMeasures'?: string;
    /**
     * 
     * @type {string}
     * @memberof RiskAssessmentVO
     */
    'assessmentDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof RiskAssessmentVO
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 
     * @type {number}
     * @memberof Role
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'roleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface RoleCreateDTO
 */
export interface RoleCreateDTO {
    /**
     * 
     * @type {string}
     * @memberof RoleCreateDTO
     */
    'roleName': string;
    /**
     * 
     * @type {string}
     * @memberof RoleCreateDTO
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SafetyIncidentCreateDTO
 */
export interface SafetyIncidentCreateDTO {
    /**
     * 
     * @type {number}
     * @memberof SafetyIncidentCreateDTO
     */
    'labId'?: number;
    /**
     * 
     * @type {string}
     * @memberof SafetyIncidentCreateDTO
     */
    'incidentTime': string;
    /**
     * 
     * @type {string}
     * @memberof SafetyIncidentCreateDTO
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof SafetyIncidentCreateDTO
     */
    'actionsTaken'?: string;
}
/**
 * 
 * @export
 * @interface SafetyIncidentVO
 */
export interface SafetyIncidentVO {
    /**
     * 
     * @type {number}
     * @memberof SafetyIncidentVO
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof SafetyIncidentVO
     */
    'labId'?: number;
    /**
     * 
     * @type {string}
     * @memberof SafetyIncidentVO
     */
    'labName'?: string;
    /**
     * 
     * @type {number}
     * @memberof SafetyIncidentVO
     */
    'reportedByUserId'?: number;
    /**
     * 
     * @type {string}
     * @memberof SafetyIncidentVO
     */
    'reportedByUserName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SafetyIncidentVO
     */
    'incidentTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof SafetyIncidentVO
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof SafetyIncidentVO
     */
    'actionsTaken'?: string;
    /**
     * 
     * @type {string}
     * @memberof SafetyIncidentVO
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface Supplier
 */
export interface Supplier {
    /**
     * 
     * @type {number}
     * @memberof Supplier
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Supplier
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Supplier
     */
    'contactPerson'?: string;
    /**
     * 
     * @type {string}
     * @memberof Supplier
     */
    'contactPhone'?: string;
    /**
     * 
     * @type {string}
     * @memberof Supplier
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof Supplier
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Supplier
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface UploadAttachmentRequest
 */
export interface UploadAttachmentRequest {
    /**
     * 
     * @type {File}
     * @memberof UploadAttachmentRequest
     */
    'file': File;
}
/**
 * 
 * @export
 * @interface UserCreateDTO
 */
export interface UserCreateDTO {
    /**
     * 
     * @type {string}
     * @memberof UserCreateDTO
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateDTO
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateDTO
     */
    'realName': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateDTO
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateDTO
     */
    'phone'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof UserCreateDTO
     */
    'roleIds'?: Array<number>;
}
/**
 * 
 * @export
 * @interface UserUpdateDTO
 */
export interface UserUpdateDTO {
    /**
     * 
     * @type {number}
     * @memberof UserUpdateDTO
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateDTO
     */
    'realName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateDTO
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateDTO
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateDTO
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface UserVO
 */
export interface UserVO {
    /**
     * 
     * @type {number}
     * @memberof UserVO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserVO
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserVO
     */
    'realName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserVO
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserVO
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserVO
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserVO
     */
    'lastLoginAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserVO
     */
    'createdAt'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserVO
     */
    'roles'?: Array<string>;
}

/**
 * AttachmentControllerApi - axios parameter creator
 * @export
 */
export const AttachmentControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} parentType 
         * @param {number} parentId 
         * @param {UploadAttachmentRequest} [uploadAttachmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAttachment: async (parentType: string, parentId: number, uploadAttachmentRequest?: UploadAttachmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentType' is not null or undefined
            assertParamExists('uploadAttachment', 'parentType', parentType)
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('uploadAttachment', 'parentId', parentId)
            const localVarPath = `/api/v1/attachments/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (parentType !== undefined) {
                localVarQueryParameter['parentType'] = parentType;
            }

            if (parentId !== undefined) {
                localVarQueryParameter['parentId'] = parentId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uploadAttachmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttachmentControllerApi - functional programming interface
 * @export
 */
export const AttachmentControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttachmentControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} parentType 
         * @param {number} parentId 
         * @param {UploadAttachmentRequest} [uploadAttachmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadAttachment(parentType: string, parentId: number, uploadAttachmentRequest?: UploadAttachmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseAttachmentVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadAttachment(parentType, parentId, uploadAttachmentRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttachmentControllerApi.uploadAttachment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AttachmentControllerApi - factory interface
 * @export
 */
export const AttachmentControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttachmentControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} parentType 
         * @param {number} parentId 
         * @param {UploadAttachmentRequest} [uploadAttachmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAttachment(parentType: string, parentId: number, uploadAttachmentRequest?: UploadAttachmentRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseAttachmentVO> {
            return localVarFp.uploadAttachment(parentType, parentId, uploadAttachmentRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AttachmentControllerApi - object-oriented interface
 * @export
 * @class AttachmentControllerApi
 * @extends {BaseAPI}
 */
export class AttachmentControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} parentType 
     * @param {number} parentId 
     * @param {UploadAttachmentRequest} [uploadAttachmentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentControllerApi
     */
    public uploadAttachment(parentType: string, parentId: number, uploadAttachmentRequest?: UploadAttachmentRequest, options?: RawAxiosRequestConfig) {
        return AttachmentControllerApiFp(this.configuration).uploadAttachment(parentType, parentId, uploadAttachmentRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthControllerApi - axios parameter creator
 * @export
 */
export const AuthControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginRequestDTO} loginRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRequestDTO: LoginRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequestDTO' is not null or undefined
            assertParamExists('login', 'loginRequestDTO', loginRequestDTO)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthControllerApi - functional programming interface
 * @export
 */
export const AuthControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginRequestDTO} loginRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRequestDTO: LoginRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseLoginResponseVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthControllerApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthControllerApi - factory interface
 * @export
 */
export const AuthControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginRequestDTO} loginRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequestDTO: LoginRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseLoginResponseVO> {
            return localVarFp.login(loginRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthControllerApi - object-oriented interface
 * @export
 * @class AuthControllerApi
 * @extends {BaseAPI}
 */
export class AuthControllerApi extends BaseAPI {
    /**
     * 
     * @param {LoginRequestDTO} loginRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public login(loginRequestDTO: LoginRequestDTO, options?: RawAxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).login(loginRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EquipmentControllerApi - axios parameter creator
 * @export
 */
export const EquipmentControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {EquipmentCreateDTO} equipmentCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEquipment: async (equipmentCreateDTO: EquipmentCreateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'equipmentCreateDTO' is not null or undefined
            assertParamExists('createEquipment', 'equipmentCreateDTO', equipmentCreateDTO)
            const localVarPath = `/api/v1/equipment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(equipmentCreateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEquipmentById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEquipmentById', 'id', id)
            const localVarPath = `/api/v1/equipment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PageRequestDTO} pageRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEquipmentPage: async (pageRequestDTO: PageRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageRequestDTO' is not null or undefined
            assertParamExists('getEquipmentPage', 'pageRequestDTO', pageRequestDTO)
            const localVarPath = `/api/v1/equipment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageRequestDTO !== undefined) {
                for (const [key, value] of Object.entries(pageRequestDTO)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordMaintenance: async (id: number, body: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('recordMaintenance', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('recordMaintenance', 'body', body)
            const localVarPath = `/api/v1/equipment/{id}/maintenance`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Equipment} equipment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEquipment: async (id: number, equipment: Equipment, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateEquipment', 'id', id)
            // verify required parameter 'equipment' is not null or undefined
            assertParamExists('updateEquipment', 'equipment', equipment)
            const localVarPath = `/api/v1/equipment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(equipment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EquipmentControllerApi - functional programming interface
 * @export
 */
export const EquipmentControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EquipmentControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {EquipmentCreateDTO} equipmentCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEquipment(equipmentCreateDTO: EquipmentCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseEquipment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEquipment(equipmentCreateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EquipmentControllerApi.createEquipment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEquipmentById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseEquipment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEquipmentById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EquipmentControllerApi.getEquipmentById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PageRequestDTO} pageRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEquipmentPage(pageRequestDTO: PageRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseIPageEquipment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEquipmentPage(pageRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EquipmentControllerApi.getEquipmentPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recordMaintenance(id: number, body: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recordMaintenance(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EquipmentControllerApi.recordMaintenance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Equipment} equipment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEquipment(id: number, equipment: Equipment, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseEquipment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEquipment(id, equipment, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EquipmentControllerApi.updateEquipment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EquipmentControllerApi - factory interface
 * @export
 */
export const EquipmentControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EquipmentControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {EquipmentCreateDTO} equipmentCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEquipment(equipmentCreateDTO: EquipmentCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseEquipment> {
            return localVarFp.createEquipment(equipmentCreateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEquipmentById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseEquipment> {
            return localVarFp.getEquipmentById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PageRequestDTO} pageRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEquipmentPage(pageRequestDTO: PageRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseIPageEquipment> {
            return localVarFp.getEquipmentPage(pageRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordMaintenance(id: number, body: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.recordMaintenance(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Equipment} equipment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEquipment(id: number, equipment: Equipment, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseEquipment> {
            return localVarFp.updateEquipment(id, equipment, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EquipmentControllerApi - object-oriented interface
 * @export
 * @class EquipmentControllerApi
 * @extends {BaseAPI}
 */
export class EquipmentControllerApi extends BaseAPI {
    /**
     * 
     * @param {EquipmentCreateDTO} equipmentCreateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentControllerApi
     */
    public createEquipment(equipmentCreateDTO: EquipmentCreateDTO, options?: RawAxiosRequestConfig) {
        return EquipmentControllerApiFp(this.configuration).createEquipment(equipmentCreateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentControllerApi
     */
    public getEquipmentById(id: number, options?: RawAxiosRequestConfig) {
        return EquipmentControllerApiFp(this.configuration).getEquipmentById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PageRequestDTO} pageRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentControllerApi
     */
    public getEquipmentPage(pageRequestDTO: PageRequestDTO, options?: RawAxiosRequestConfig) {
        return EquipmentControllerApiFp(this.configuration).getEquipmentPage(pageRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {string} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentControllerApi
     */
    public recordMaintenance(id: number, body: string, options?: RawAxiosRequestConfig) {
        return EquipmentControllerApiFp(this.configuration).recordMaintenance(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Equipment} equipment 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentControllerApi
     */
    public updateEquipment(id: number, equipment: Equipment, options?: RawAxiosRequestConfig) {
        return EquipmentControllerApiFp(this.configuration).updateEquipment(id, equipment, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExperimentRecordControllerApi - axios parameter creator
 * @export
 */
export const ExperimentRecordControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ExperimentRecordCreateDTO} experimentRecordCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExperimentRecord: async (experimentRecordCreateDTO: ExperimentRecordCreateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'experimentRecordCreateDTO' is not null or undefined
            assertParamExists('createExperimentRecord', 'experimentRecordCreateDTO', experimentRecordCreateDTO)
            const localVarPath = `/api/v1/experiment-records`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(experimentRecordCreateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRecordById', 'id', id)
            const localVarPath = `/api/v1/experiment-records/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} projectId 
         * @param {PageRequestDTO} pageRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordsByProjectId: async (projectId: number, pageRequestDTO: PageRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getRecordsByProjectId', 'projectId', projectId)
            // verify required parameter 'pageRequestDTO' is not null or undefined
            assertParamExists('getRecordsByProjectId', 'pageRequestDTO', pageRequestDTO)
            const localVarPath = `/api/v1/experiment-records/project/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageRequestDTO !== undefined) {
                for (const [key, value] of Object.entries(pageRequestDTO)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExperimentRecordControllerApi - functional programming interface
 * @export
 */
export const ExperimentRecordControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExperimentRecordControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ExperimentRecordCreateDTO} experimentRecordCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createExperimentRecord(experimentRecordCreateDTO: ExperimentRecordCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseExperimentRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createExperimentRecord(experimentRecordCreateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperimentRecordControllerApi.createExperimentRecord']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecordById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseExperimentRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecordById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperimentRecordControllerApi.getRecordById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} projectId 
         * @param {PageRequestDTO} pageRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecordsByProjectId(projectId: number, pageRequestDTO: PageRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseIPageExperimentRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecordsByProjectId(projectId, pageRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperimentRecordControllerApi.getRecordsByProjectId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExperimentRecordControllerApi - factory interface
 * @export
 */
export const ExperimentRecordControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExperimentRecordControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {ExperimentRecordCreateDTO} experimentRecordCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExperimentRecord(experimentRecordCreateDTO: ExperimentRecordCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseExperimentRecord> {
            return localVarFp.createExperimentRecord(experimentRecordCreateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseExperimentRecord> {
            return localVarFp.getRecordById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} projectId 
         * @param {PageRequestDTO} pageRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordsByProjectId(projectId: number, pageRequestDTO: PageRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseIPageExperimentRecord> {
            return localVarFp.getRecordsByProjectId(projectId, pageRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExperimentRecordControllerApi - object-oriented interface
 * @export
 * @class ExperimentRecordControllerApi
 * @extends {BaseAPI}
 */
export class ExperimentRecordControllerApi extends BaseAPI {
    /**
     * 
     * @param {ExperimentRecordCreateDTO} experimentRecordCreateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentRecordControllerApi
     */
    public createExperimentRecord(experimentRecordCreateDTO: ExperimentRecordCreateDTO, options?: RawAxiosRequestConfig) {
        return ExperimentRecordControllerApiFp(this.configuration).createExperimentRecord(experimentRecordCreateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentRecordControllerApi
     */
    public getRecordById(id: number, options?: RawAxiosRequestConfig) {
        return ExperimentRecordControllerApiFp(this.configuration).getRecordById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} projectId 
     * @param {PageRequestDTO} pageRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentRecordControllerApi
     */
    public getRecordsByProjectId(projectId: number, pageRequestDTO: PageRequestDTO, options?: RawAxiosRequestConfig) {
        return ExperimentRecordControllerApiFp(this.configuration).getRecordsByProjectId(projectId, pageRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExperimentReportControllerApi - axios parameter creator
 * @export
 */
export const ExperimentReportControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {ReportVersionCreateDTO} reportVersionCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewVersion: async (id: number, reportVersionCreateDTO: ReportVersionCreateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createNewVersion', 'id', id)
            // verify required parameter 'reportVersionCreateDTO' is not null or undefined
            assertParamExists('createNewVersion', 'reportVersionCreateDTO', reportVersionCreateDTO)
            const localVarPath = `/api/v1/experiment-reports/{id}/versions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportVersionCreateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ExperimentReportCreateDTO} experimentReportCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReport: async (experimentReportCreateDTO: ExperimentReportCreateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'experimentReportCreateDTO' is not null or undefined
            assertParamExists('createReport', 'experimentReportCreateDTO', experimentReportCreateDTO)
            const localVarPath = `/api/v1/experiment-reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(experimentReportCreateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getReportById', 'id', id)
            const localVarPath = `/api/v1/experiment-reports/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExperimentReportControllerApi - functional programming interface
 * @export
 */
export const ExperimentReportControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExperimentReportControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {ReportVersionCreateDTO} reportVersionCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewVersion(id: number, reportVersionCreateDTO: ReportVersionCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseExperimentReportVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewVersion(id, reportVersionCreateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperimentReportControllerApi.createNewVersion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ExperimentReportCreateDTO} experimentReportCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReport(experimentReportCreateDTO: ExperimentReportCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseExperimentReportVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReport(experimentReportCreateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperimentReportControllerApi.createReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReportById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseExperimentReportVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReportById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperimentReportControllerApi.getReportById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExperimentReportControllerApi - factory interface
 * @export
 */
export const ExperimentReportControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExperimentReportControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {ReportVersionCreateDTO} reportVersionCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewVersion(id: number, reportVersionCreateDTO: ReportVersionCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseExperimentReportVO> {
            return localVarFp.createNewVersion(id, reportVersionCreateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ExperimentReportCreateDTO} experimentReportCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReport(experimentReportCreateDTO: ExperimentReportCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseExperimentReportVO> {
            return localVarFp.createReport(experimentReportCreateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseExperimentReportVO> {
            return localVarFp.getReportById(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExperimentReportControllerApi - object-oriented interface
 * @export
 * @class ExperimentReportControllerApi
 * @extends {BaseAPI}
 */
export class ExperimentReportControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {ReportVersionCreateDTO} reportVersionCreateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentReportControllerApi
     */
    public createNewVersion(id: number, reportVersionCreateDTO: ReportVersionCreateDTO, options?: RawAxiosRequestConfig) {
        return ExperimentReportControllerApiFp(this.configuration).createNewVersion(id, reportVersionCreateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExperimentReportCreateDTO} experimentReportCreateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentReportControllerApi
     */
    public createReport(experimentReportCreateDTO: ExperimentReportCreateDTO, options?: RawAxiosRequestConfig) {
        return ExperimentReportControllerApiFp(this.configuration).createReport(experimentReportCreateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentReportControllerApi
     */
    public getReportById(id: number, options?: RawAxiosRequestConfig) {
        return ExperimentReportControllerApiFp(this.configuration).getReportById(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LabControllerApi - axios parameter creator
 * @export
 */
export const LabControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Lab} lab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLab: async (lab: Lab, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lab' is not null or undefined
            assertParamExists('createLab', 'lab', lab)
            const localVarPath = `/api/v1/labs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lab, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLab: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteLab', 'id', id)
            const localVarPath = `/api/v1/labs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLabById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getLabById', 'id', id)
            const localVarPath = `/api/v1/labs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PageRequestDTO} pageRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLabPage: async (pageRequestDTO: PageRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageRequestDTO' is not null or undefined
            assertParamExists('getLabPage', 'pageRequestDTO', pageRequestDTO)
            const localVarPath = `/api/v1/labs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageRequestDTO !== undefined) {
                for (const [key, value] of Object.entries(pageRequestDTO)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Lab} lab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLab: async (id: number, lab: Lab, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateLab', 'id', id)
            // verify required parameter 'lab' is not null or undefined
            assertParamExists('updateLab', 'lab', lab)
            const localVarPath = `/api/v1/labs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lab, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LabControllerApi - functional programming interface
 * @export
 */
export const LabControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LabControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Lab} lab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLab(lab: Lab, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseLab>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLab(lab, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LabControllerApi.createLab']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLab(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLab(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LabControllerApi.deleteLab']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLabById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseLab>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLabById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LabControllerApi.getLabById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PageRequestDTO} pageRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLabPage(pageRequestDTO: PageRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseIPageLab>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLabPage(pageRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LabControllerApi.getLabPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Lab} lab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLab(id: number, lab: Lab, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseLab>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLab(id, lab, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LabControllerApi.updateLab']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LabControllerApi - factory interface
 * @export
 */
export const LabControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LabControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {Lab} lab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLab(lab: Lab, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseLab> {
            return localVarFp.createLab(lab, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLab(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.deleteLab(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLabById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseLab> {
            return localVarFp.getLabById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PageRequestDTO} pageRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLabPage(pageRequestDTO: PageRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseIPageLab> {
            return localVarFp.getLabPage(pageRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Lab} lab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLab(id: number, lab: Lab, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseLab> {
            return localVarFp.updateLab(id, lab, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LabControllerApi - object-oriented interface
 * @export
 * @class LabControllerApi
 * @extends {BaseAPI}
 */
export class LabControllerApi extends BaseAPI {
    /**
     * 
     * @param {Lab} lab 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabControllerApi
     */
    public createLab(lab: Lab, options?: RawAxiosRequestConfig) {
        return LabControllerApiFp(this.configuration).createLab(lab, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabControllerApi
     */
    public deleteLab(id: number, options?: RawAxiosRequestConfig) {
        return LabControllerApiFp(this.configuration).deleteLab(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabControllerApi
     */
    public getLabById(id: number, options?: RawAxiosRequestConfig) {
        return LabControllerApiFp(this.configuration).getLabById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PageRequestDTO} pageRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabControllerApi
     */
    public getLabPage(pageRequestDTO: PageRequestDTO, options?: RawAxiosRequestConfig) {
        return LabControllerApiFp(this.configuration).getLabPage(pageRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Lab} lab 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabControllerApi
     */
    public updateLab(id: number, lab: Lab, options?: RawAxiosRequestConfig) {
        return LabControllerApiFp(this.configuration).updateLab(id, lab, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MaterialControllerApi - axios parameter creator
 * @export
 */
export const MaterialControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {MaterialStockAdjustDTO} materialStockAdjustDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustStock: async (materialStockAdjustDTO: MaterialStockAdjustDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'materialStockAdjustDTO' is not null or undefined
            assertParamExists('adjustStock', 'materialStockAdjustDTO', materialStockAdjustDTO)
            const localVarPath = `/api/v1/materials/stock-adjustment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(materialStockAdjustDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Material} material 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMaterial: async (material: Material, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'material' is not null or undefined
            assertParamExists('createMaterial', 'material', material)
            const localVarPath = `/api/v1/materials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(material, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PageRequestDTO} pageRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMaterialPage: async (pageRequestDTO: PageRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageRequestDTO' is not null or undefined
            assertParamExists('getMaterialPage', 'pageRequestDTO', pageRequestDTO)
            const localVarPath = `/api/v1/materials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageRequestDTO !== undefined) {
                for (const [key, value] of Object.entries(pageRequestDTO)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Material} material 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMaterial: async (id: number, material: Material, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateMaterial', 'id', id)
            // verify required parameter 'material' is not null or undefined
            assertParamExists('updateMaterial', 'material', material)
            const localVarPath = `/api/v1/materials/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(material, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MaterialControllerApi - functional programming interface
 * @export
 */
export const MaterialControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MaterialControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {MaterialStockAdjustDTO} materialStockAdjustDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adjustStock(materialStockAdjustDTO: MaterialStockAdjustDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adjustStock(materialStockAdjustDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MaterialControllerApi.adjustStock']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Material} material 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMaterial(material: Material, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseMaterial>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMaterial(material, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MaterialControllerApi.createMaterial']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PageRequestDTO} pageRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMaterialPage(pageRequestDTO: PageRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseIPageMaterial>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMaterialPage(pageRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MaterialControllerApi.getMaterialPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Material} material 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMaterial(id: number, material: Material, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseMaterial>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMaterial(id, material, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MaterialControllerApi.updateMaterial']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MaterialControllerApi - factory interface
 * @export
 */
export const MaterialControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MaterialControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {MaterialStockAdjustDTO} materialStockAdjustDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustStock(materialStockAdjustDTO: MaterialStockAdjustDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.adjustStock(materialStockAdjustDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Material} material 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMaterial(material: Material, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseMaterial> {
            return localVarFp.createMaterial(material, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PageRequestDTO} pageRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMaterialPage(pageRequestDTO: PageRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseIPageMaterial> {
            return localVarFp.getMaterialPage(pageRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Material} material 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMaterial(id: number, material: Material, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseMaterial> {
            return localVarFp.updateMaterial(id, material, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MaterialControllerApi - object-oriented interface
 * @export
 * @class MaterialControllerApi
 * @extends {BaseAPI}
 */
export class MaterialControllerApi extends BaseAPI {
    /**
     * 
     * @param {MaterialStockAdjustDTO} materialStockAdjustDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaterialControllerApi
     */
    public adjustStock(materialStockAdjustDTO: MaterialStockAdjustDTO, options?: RawAxiosRequestConfig) {
        return MaterialControllerApiFp(this.configuration).adjustStock(materialStockAdjustDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Material} material 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaterialControllerApi
     */
    public createMaterial(material: Material, options?: RawAxiosRequestConfig) {
        return MaterialControllerApiFp(this.configuration).createMaterial(material, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PageRequestDTO} pageRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaterialControllerApi
     */
    public getMaterialPage(pageRequestDTO: PageRequestDTO, options?: RawAxiosRequestConfig) {
        return MaterialControllerApiFp(this.configuration).getMaterialPage(pageRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Material} material 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaterialControllerApi
     */
    public updateMaterial(id: number, material: Material, options?: RawAxiosRequestConfig) {
        return MaterialControllerApiFp(this.configuration).updateMaterial(id, material, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PermissionControllerApi - axios parameter creator
 * @export
 */
export const PermissionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPermissions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PermissionControllerApi - functional programming interface
 * @export
 */
export const PermissionControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PermissionControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPermissions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListPermission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPermissions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PermissionControllerApi.getAllPermissions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PermissionControllerApi - factory interface
 * @export
 */
export const PermissionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PermissionControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPermissions(options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListPermission> {
            return localVarFp.getAllPermissions(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PermissionControllerApi - object-oriented interface
 * @export
 * @class PermissionControllerApi
 * @extends {BaseAPI}
 */
export class PermissionControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionControllerApi
     */
    public getAllPermissions(options?: RawAxiosRequestConfig) {
        return PermissionControllerApiFp(this.configuration).getAllPermissions(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProjectControllerApi - axios parameter creator
 * @export
 */
export const ProjectControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddProjectMemberDTO} addProjectMemberDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMemberToProject: async (addProjectMemberDTO: AddProjectMemberDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addProjectMemberDTO' is not null or undefined
            assertParamExists('addMemberToProject', 'addProjectMemberDTO', addProjectMemberDTO)
            const localVarPath = `/api/v1/projects/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addProjectMemberDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProjectCreateDTO} projectCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject: async (projectCreateDTO: ProjectCreateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectCreateDTO' is not null or undefined
            assertParamExists('createProject', 'projectCreateDTO', projectCreateDTO)
            const localVarPath = `/api/v1/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectCreateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteProject', 'id', id)
            const localVarPath = `/api/v1/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProjectById', 'id', id)
            const localVarPath = `/api/v1/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PageRequestDTO} pageRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectPage: async (pageRequestDTO: PageRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageRequestDTO' is not null or undefined
            assertParamExists('getProjectPage', 'pageRequestDTO', pageRequestDTO)
            const localVarPath = `/api/v1/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageRequestDTO !== undefined) {
                for (const [key, value] of Object.entries(pageRequestDTO)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} projectId 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMemberFromProject: async (projectId: number, userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('removeMemberFromProject', 'projectId', projectId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('removeMemberFromProject', 'userId', userId)
            const localVarPath = `/api/v1/projects/{projectId}/members/{userId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProjectUpdateDTO} projectUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProject: async (id: number, projectUpdateDTO: ProjectUpdateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateProject', 'id', id)
            // verify required parameter 'projectUpdateDTO' is not null or undefined
            assertParamExists('updateProject', 'projectUpdateDTO', projectUpdateDTO)
            const localVarPath = `/api/v1/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectUpdateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectControllerApi - functional programming interface
 * @export
 */
export const ProjectControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AddProjectMemberDTO} addProjectMemberDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMemberToProject(addProjectMemberDTO: AddProjectMemberDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMemberToProject(addProjectMemberDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectControllerApi.addMemberToProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ProjectCreateDTO} projectCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProject(projectCreateDTO: ProjectCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseProjectVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProject(projectCreateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectControllerApi.createProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProject(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProject(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectControllerApi.deleteProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseProjectVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectControllerApi.getProjectById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PageRequestDTO} pageRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectPage(pageRequestDTO: PageRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseIPageProjectVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectPage(pageRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectControllerApi.getProjectPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} projectId 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeMemberFromProject(projectId: number, userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeMemberFromProject(projectId, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectControllerApi.removeMemberFromProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProjectUpdateDTO} projectUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProject(id: number, projectUpdateDTO: ProjectUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseProjectVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProject(id, projectUpdateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectControllerApi.updateProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectControllerApi - factory interface
 * @export
 */
export const ProjectControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {AddProjectMemberDTO} addProjectMemberDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMemberToProject(addProjectMemberDTO: AddProjectMemberDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.addMemberToProject(addProjectMemberDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProjectCreateDTO} projectCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(projectCreateDTO: ProjectCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseProjectVO> {
            return localVarFp.createProject(projectCreateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.deleteProject(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseProjectVO> {
            return localVarFp.getProjectById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PageRequestDTO} pageRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectPage(pageRequestDTO: PageRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseIPageProjectVO> {
            return localVarFp.getProjectPage(pageRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} projectId 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMemberFromProject(projectId: number, userId: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.removeMemberFromProject(projectId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProjectUpdateDTO} projectUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProject(id: number, projectUpdateDTO: ProjectUpdateDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseProjectVO> {
            return localVarFp.updateProject(id, projectUpdateDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectControllerApi - object-oriented interface
 * @export
 * @class ProjectControllerApi
 * @extends {BaseAPI}
 */
export class ProjectControllerApi extends BaseAPI {
    /**
     * 
     * @param {AddProjectMemberDTO} addProjectMemberDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public addMemberToProject(addProjectMemberDTO: AddProjectMemberDTO, options?: RawAxiosRequestConfig) {
        return ProjectControllerApiFp(this.configuration).addMemberToProject(addProjectMemberDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProjectCreateDTO} projectCreateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public createProject(projectCreateDTO: ProjectCreateDTO, options?: RawAxiosRequestConfig) {
        return ProjectControllerApiFp(this.configuration).createProject(projectCreateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public deleteProject(id: number, options?: RawAxiosRequestConfig) {
        return ProjectControllerApiFp(this.configuration).deleteProject(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public getProjectById(id: number, options?: RawAxiosRequestConfig) {
        return ProjectControllerApiFp(this.configuration).getProjectById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PageRequestDTO} pageRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public getProjectPage(pageRequestDTO: PageRequestDTO, options?: RawAxiosRequestConfig) {
        return ProjectControllerApiFp(this.configuration).getProjectPage(pageRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} projectId 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public removeMemberFromProject(projectId: number, userId: number, options?: RawAxiosRequestConfig) {
        return ProjectControllerApiFp(this.configuration).removeMemberFromProject(projectId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProjectUpdateDTO} projectUpdateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public updateProject(id: number, projectUpdateDTO: ProjectUpdateDTO, options?: RawAxiosRequestConfig) {
        return ProjectControllerApiFp(this.configuration).updateProject(id, projectUpdateDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProjectTaskControllerApi - axios parameter creator
 * @export
 */
export const ProjectTaskControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ProjectTaskCreateDTO} projectTaskCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTask: async (projectTaskCreateDTO: ProjectTaskCreateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectTaskCreateDTO' is not null or undefined
            assertParamExists('createTask', 'projectTaskCreateDTO', projectTaskCreateDTO)
            const localVarPath = `/api/v1/project-tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectTaskCreateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTask: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTask', 'id', id)
            const localVarPath = `/api/v1/project-tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasksByProjectId: async (projectId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getTasksByProjectId', 'projectId', projectId)
            const localVarPath = `/api/v1/project-tasks/project/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProjectTaskUpdateDTO} projectTaskUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask: async (id: number, projectTaskUpdateDTO: ProjectTaskUpdateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTask', 'id', id)
            // verify required parameter 'projectTaskUpdateDTO' is not null or undefined
            assertParamExists('updateTask', 'projectTaskUpdateDTO', projectTaskUpdateDTO)
            const localVarPath = `/api/v1/project-tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectTaskUpdateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectTaskControllerApi - functional programming interface
 * @export
 */
export const ProjectTaskControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectTaskControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ProjectTaskCreateDTO} projectTaskCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTask(projectTaskCreateDTO: ProjectTaskCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseProjectTask>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTask(projectTaskCreateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectTaskControllerApi.createTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTask(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTask(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectTaskControllerApi.deleteTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTasksByProjectId(projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListProjectTask>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTasksByProjectId(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectTaskControllerApi.getTasksByProjectId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProjectTaskUpdateDTO} projectTaskUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTask(id: number, projectTaskUpdateDTO: ProjectTaskUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseProjectTask>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTask(id, projectTaskUpdateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectTaskControllerApi.updateTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectTaskControllerApi - factory interface
 * @export
 */
export const ProjectTaskControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectTaskControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {ProjectTaskCreateDTO} projectTaskCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTask(projectTaskCreateDTO: ProjectTaskCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseProjectTask> {
            return localVarFp.createTask(projectTaskCreateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTask(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.deleteTask(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasksByProjectId(projectId: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListProjectTask> {
            return localVarFp.getTasksByProjectId(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProjectTaskUpdateDTO} projectTaskUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask(id: number, projectTaskUpdateDTO: ProjectTaskUpdateDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseProjectTask> {
            return localVarFp.updateTask(id, projectTaskUpdateDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectTaskControllerApi - object-oriented interface
 * @export
 * @class ProjectTaskControllerApi
 * @extends {BaseAPI}
 */
export class ProjectTaskControllerApi extends BaseAPI {
    /**
     * 
     * @param {ProjectTaskCreateDTO} projectTaskCreateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectTaskControllerApi
     */
    public createTask(projectTaskCreateDTO: ProjectTaskCreateDTO, options?: RawAxiosRequestConfig) {
        return ProjectTaskControllerApiFp(this.configuration).createTask(projectTaskCreateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectTaskControllerApi
     */
    public deleteTask(id: number, options?: RawAxiosRequestConfig) {
        return ProjectTaskControllerApiFp(this.configuration).deleteTask(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectTaskControllerApi
     */
    public getTasksByProjectId(projectId: number, options?: RawAxiosRequestConfig) {
        return ProjectTaskControllerApiFp(this.configuration).getTasksByProjectId(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProjectTaskUpdateDTO} projectTaskUpdateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectTaskControllerApi
     */
    public updateTask(id: number, projectTaskUpdateDTO: ProjectTaskUpdateDTO, options?: RawAxiosRequestConfig) {
        return ProjectTaskControllerApiFp(this.configuration).updateTask(id, projectTaskUpdateDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ResourceRequestControllerApi - axios parameter creator
 * @export
 */
export const ResourceRequestControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ResourceRequestApproveDTO} resourceRequestApproveDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveResourceRequest: async (resourceRequestApproveDTO: ResourceRequestApproveDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceRequestApproveDTO' is not null or undefined
            assertParamExists('approveResourceRequest', 'resourceRequestApproveDTO', resourceRequestApproveDTO)
            const localVarPath = `/api/v1/resource-requests/approval`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resourceRequestApproveDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResourceRequestCreateDTO} resourceRequestCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceRequest: async (resourceRequestCreateDTO: ResourceRequestCreateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceRequestCreateDTO' is not null or undefined
            assertParamExists('createResourceRequest', 'resourceRequestCreateDTO', resourceRequestCreateDTO)
            const localVarPath = `/api/v1/resource-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resourceRequestCreateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRequestById', 'id', id)
            const localVarPath = `/api/v1/resource-requests/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResourceRequestQueryDTO} queryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequests: async (queryDTO: ResourceRequestQueryDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'queryDTO' is not null or undefined
            assertParamExists('getRequests', 'queryDTO', queryDTO)
            const localVarPath = `/api/v1/resource-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (queryDTO !== undefined) {
                for (const [key, value] of Object.entries(queryDTO)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResourceRequestControllerApi - functional programming interface
 * @export
 */
export const ResourceRequestControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ResourceRequestControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ResourceRequestApproveDTO} resourceRequestApproveDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveResourceRequest(resourceRequestApproveDTO: ResourceRequestApproveDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseResourceRequestVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveResourceRequest(resourceRequestApproveDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResourceRequestControllerApi.approveResourceRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ResourceRequestCreateDTO} resourceRequestCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createResourceRequest(resourceRequestCreateDTO: ResourceRequestCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseResourceRequestVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createResourceRequest(resourceRequestCreateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResourceRequestControllerApi.createResourceRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRequestById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseResourceRequestVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRequestById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResourceRequestControllerApi.getRequestById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ResourceRequestQueryDTO} queryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRequests(queryDTO: ResourceRequestQueryDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseIPageResourceRequestVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRequests(queryDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResourceRequestControllerApi.getRequests']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ResourceRequestControllerApi - factory interface
 * @export
 */
export const ResourceRequestControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ResourceRequestControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {ResourceRequestApproveDTO} resourceRequestApproveDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveResourceRequest(resourceRequestApproveDTO: ResourceRequestApproveDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseResourceRequestVO> {
            return localVarFp.approveResourceRequest(resourceRequestApproveDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResourceRequestCreateDTO} resourceRequestCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceRequest(resourceRequestCreateDTO: ResourceRequestCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseResourceRequestVO> {
            return localVarFp.createResourceRequest(resourceRequestCreateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseResourceRequestVO> {
            return localVarFp.getRequestById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResourceRequestQueryDTO} queryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequests(queryDTO: ResourceRequestQueryDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseIPageResourceRequestVO> {
            return localVarFp.getRequests(queryDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ResourceRequestControllerApi - object-oriented interface
 * @export
 * @class ResourceRequestControllerApi
 * @extends {BaseAPI}
 */
export class ResourceRequestControllerApi extends BaseAPI {
    /**
     * 
     * @param {ResourceRequestApproveDTO} resourceRequestApproveDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRequestControllerApi
     */
    public approveResourceRequest(resourceRequestApproveDTO: ResourceRequestApproveDTO, options?: RawAxiosRequestConfig) {
        return ResourceRequestControllerApiFp(this.configuration).approveResourceRequest(resourceRequestApproveDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResourceRequestCreateDTO} resourceRequestCreateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRequestControllerApi
     */
    public createResourceRequest(resourceRequestCreateDTO: ResourceRequestCreateDTO, options?: RawAxiosRequestConfig) {
        return ResourceRequestControllerApiFp(this.configuration).createResourceRequest(resourceRequestCreateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRequestControllerApi
     */
    public getRequestById(id: number, options?: RawAxiosRequestConfig) {
        return ResourceRequestControllerApiFp(this.configuration).getRequestById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResourceRequestQueryDTO} queryDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRequestControllerApi
     */
    public getRequests(queryDTO: ResourceRequestQueryDTO, options?: RawAxiosRequestConfig) {
        return ResourceRequestControllerApiFp(this.configuration).getRequests(queryDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RiskAssessmentControllerApi - axios parameter creator
 * @export
 */
export const RiskAssessmentControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {RiskAssessmentCreateDTO} riskAssessmentCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssessment: async (riskAssessmentCreateDTO: RiskAssessmentCreateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'riskAssessmentCreateDTO' is not null or undefined
            assertParamExists('createAssessment', 'riskAssessmentCreateDTO', riskAssessmentCreateDTO)
            const localVarPath = `/api/v1/risk-assessments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(riskAssessmentCreateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssessmentById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAssessmentById', 'id', id)
            const localVarPath = `/api/v1/risk-assessments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssessmentsByProjectId: async (projectId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getAssessmentsByProjectId', 'projectId', projectId)
            const localVarPath = `/api/v1/risk-assessments/project/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RiskAssessmentControllerApi - functional programming interface
 * @export
 */
export const RiskAssessmentControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RiskAssessmentControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {RiskAssessmentCreateDTO} riskAssessmentCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssessment(riskAssessmentCreateDTO: RiskAssessmentCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseRiskAssessmentVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAssessment(riskAssessmentCreateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RiskAssessmentControllerApi.createAssessment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssessmentById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseRiskAssessmentVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssessmentById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RiskAssessmentControllerApi.getAssessmentById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssessmentsByProjectId(projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListRiskAssessmentVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssessmentsByProjectId(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RiskAssessmentControllerApi.getAssessmentsByProjectId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RiskAssessmentControllerApi - factory interface
 * @export
 */
export const RiskAssessmentControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RiskAssessmentControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {RiskAssessmentCreateDTO} riskAssessmentCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssessment(riskAssessmentCreateDTO: RiskAssessmentCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseRiskAssessmentVO> {
            return localVarFp.createAssessment(riskAssessmentCreateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssessmentById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseRiskAssessmentVO> {
            return localVarFp.getAssessmentById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssessmentsByProjectId(projectId: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListRiskAssessmentVO> {
            return localVarFp.getAssessmentsByProjectId(projectId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RiskAssessmentControllerApi - object-oriented interface
 * @export
 * @class RiskAssessmentControllerApi
 * @extends {BaseAPI}
 */
export class RiskAssessmentControllerApi extends BaseAPI {
    /**
     * 
     * @param {RiskAssessmentCreateDTO} riskAssessmentCreateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RiskAssessmentControllerApi
     */
    public createAssessment(riskAssessmentCreateDTO: RiskAssessmentCreateDTO, options?: RawAxiosRequestConfig) {
        return RiskAssessmentControllerApiFp(this.configuration).createAssessment(riskAssessmentCreateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RiskAssessmentControllerApi
     */
    public getAssessmentById(id: number, options?: RawAxiosRequestConfig) {
        return RiskAssessmentControllerApiFp(this.configuration).getAssessmentById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RiskAssessmentControllerApi
     */
    public getAssessmentsByProjectId(projectId: number, options?: RawAxiosRequestConfig) {
        return RiskAssessmentControllerApiFp(this.configuration).getAssessmentsByProjectId(projectId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RoleControllerApi - axios parameter creator
 * @export
 */
export const RoleControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AssignPermissionsToRoleDTO} assignPermissionsToRoleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignPermissionsToRole: async (assignPermissionsToRoleDTO: AssignPermissionsToRoleDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignPermissionsToRoleDTO' is not null or undefined
            assertParamExists('assignPermissionsToRole', 'assignPermissionsToRoleDTO', assignPermissionsToRoleDTO)
            const localVarPath = `/api/v1/roles/assign-permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assignPermissionsToRoleDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RoleCreateDTO} roleCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole: async (roleCreateDTO: RoleCreateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleCreateDTO' is not null or undefined
            assertParamExists('createRole', 'roleCreateDTO', roleCreateDTO)
            const localVarPath = `/api/v1/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleCreateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRoles: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoleControllerApi - functional programming interface
 * @export
 */
export const RoleControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoleControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AssignPermissionsToRoleDTO} assignPermissionsToRoleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignPermissionsToRole(assignPermissionsToRoleDTO: AssignPermissionsToRoleDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignPermissionsToRole(assignPermissionsToRoleDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleControllerApi.assignPermissionsToRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RoleCreateDTO} roleCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRole(roleCreateDTO: RoleCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseRole>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRole(roleCreateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleControllerApi.createRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRoles(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListRole>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRoles(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleControllerApi.getAllRoles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RoleControllerApi - factory interface
 * @export
 */
export const RoleControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoleControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {AssignPermissionsToRoleDTO} assignPermissionsToRoleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignPermissionsToRole(assignPermissionsToRoleDTO: AssignPermissionsToRoleDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.assignPermissionsToRole(assignPermissionsToRoleDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RoleCreateDTO} roleCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole(roleCreateDTO: RoleCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseRole> {
            return localVarFp.createRole(roleCreateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRoles(options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListRole> {
            return localVarFp.getAllRoles(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoleControllerApi - object-oriented interface
 * @export
 * @class RoleControllerApi
 * @extends {BaseAPI}
 */
export class RoleControllerApi extends BaseAPI {
    /**
     * 
     * @param {AssignPermissionsToRoleDTO} assignPermissionsToRoleDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public assignPermissionsToRole(assignPermissionsToRoleDTO: AssignPermissionsToRoleDTO, options?: RawAxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).assignPermissionsToRole(assignPermissionsToRoleDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RoleCreateDTO} roleCreateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public createRole(roleCreateDTO: RoleCreateDTO, options?: RawAxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).createRole(roleCreateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public getAllRoles(options?: RawAxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).getAllRoles(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SafetyIncidentControllerApi - axios parameter creator
 * @export
 */
export const SafetyIncidentControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncidentById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getIncidentById', 'id', id)
            const localVarPath = `/api/v1/safety-incidents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PageRequestDTO} pageRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncidentPage: async (pageRequestDTO: PageRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageRequestDTO' is not null or undefined
            assertParamExists('getIncidentPage', 'pageRequestDTO', pageRequestDTO)
            const localVarPath = `/api/v1/safety-incidents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageRequestDTO !== undefined) {
                for (const [key, value] of Object.entries(pageRequestDTO)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SafetyIncidentCreateDTO} safetyIncidentCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordIncident: async (safetyIncidentCreateDTO: SafetyIncidentCreateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'safetyIncidentCreateDTO' is not null or undefined
            assertParamExists('recordIncident', 'safetyIncidentCreateDTO', safetyIncidentCreateDTO)
            const localVarPath = `/api/v1/safety-incidents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(safetyIncidentCreateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SafetyIncidentControllerApi - functional programming interface
 * @export
 */
export const SafetyIncidentControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SafetyIncidentControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIncidentById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseSafetyIncidentVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIncidentById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SafetyIncidentControllerApi.getIncidentById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PageRequestDTO} pageRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIncidentPage(pageRequestDTO: PageRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseIPageSafetyIncidentVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIncidentPage(pageRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SafetyIncidentControllerApi.getIncidentPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SafetyIncidentCreateDTO} safetyIncidentCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recordIncident(safetyIncidentCreateDTO: SafetyIncidentCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseSafetyIncidentVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recordIncident(safetyIncidentCreateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SafetyIncidentControllerApi.recordIncident']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SafetyIncidentControllerApi - factory interface
 * @export
 */
export const SafetyIncidentControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SafetyIncidentControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncidentById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseSafetyIncidentVO> {
            return localVarFp.getIncidentById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PageRequestDTO} pageRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncidentPage(pageRequestDTO: PageRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseIPageSafetyIncidentVO> {
            return localVarFp.getIncidentPage(pageRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SafetyIncidentCreateDTO} safetyIncidentCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordIncident(safetyIncidentCreateDTO: SafetyIncidentCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseSafetyIncidentVO> {
            return localVarFp.recordIncident(safetyIncidentCreateDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SafetyIncidentControllerApi - object-oriented interface
 * @export
 * @class SafetyIncidentControllerApi
 * @extends {BaseAPI}
 */
export class SafetyIncidentControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SafetyIncidentControllerApi
     */
    public getIncidentById(id: number, options?: RawAxiosRequestConfig) {
        return SafetyIncidentControllerApiFp(this.configuration).getIncidentById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PageRequestDTO} pageRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SafetyIncidentControllerApi
     */
    public getIncidentPage(pageRequestDTO: PageRequestDTO, options?: RawAxiosRequestConfig) {
        return SafetyIncidentControllerApiFp(this.configuration).getIncidentPage(pageRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SafetyIncidentCreateDTO} safetyIncidentCreateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SafetyIncidentControllerApi
     */
    public recordIncident(safetyIncidentCreateDTO: SafetyIncidentCreateDTO, options?: RawAxiosRequestConfig) {
        return SafetyIncidentControllerApiFp(this.configuration).recordIncident(safetyIncidentCreateDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SupplierControllerApi - axios parameter creator
 * @export
 */
export const SupplierControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Supplier} supplier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSupplier: async (supplier: Supplier, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'supplier' is not null or undefined
            assertParamExists('createSupplier', 'supplier', supplier)
            const localVarPath = `/api/v1/suppliers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(supplier, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSupplier: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSupplier', 'id', id)
            const localVarPath = `/api/v1/suppliers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupplierById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSupplierById', 'id', id)
            const localVarPath = `/api/v1/suppliers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PageRequestDTO} pageRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupplierPage: async (pageRequestDTO: PageRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageRequestDTO' is not null or undefined
            assertParamExists('getSupplierPage', 'pageRequestDTO', pageRequestDTO)
            const localVarPath = `/api/v1/suppliers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageRequestDTO !== undefined) {
                for (const [key, value] of Object.entries(pageRequestDTO)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Supplier} supplier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSupplier: async (id: number, supplier: Supplier, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSupplier', 'id', id)
            // verify required parameter 'supplier' is not null or undefined
            assertParamExists('updateSupplier', 'supplier', supplier)
            const localVarPath = `/api/v1/suppliers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(supplier, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SupplierControllerApi - functional programming interface
 * @export
 */
export const SupplierControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SupplierControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Supplier} supplier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSupplier(supplier: Supplier, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseSupplier>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSupplier(supplier, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SupplierControllerApi.createSupplier']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSupplier(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSupplier(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SupplierControllerApi.deleteSupplier']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSupplierById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseSupplier>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSupplierById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SupplierControllerApi.getSupplierById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PageRequestDTO} pageRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSupplierPage(pageRequestDTO: PageRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseIPageSupplier>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSupplierPage(pageRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SupplierControllerApi.getSupplierPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Supplier} supplier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSupplier(id: number, supplier: Supplier, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseSupplier>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSupplier(id, supplier, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SupplierControllerApi.updateSupplier']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SupplierControllerApi - factory interface
 * @export
 */
export const SupplierControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SupplierControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {Supplier} supplier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSupplier(supplier: Supplier, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseSupplier> {
            return localVarFp.createSupplier(supplier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSupplier(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.deleteSupplier(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupplierById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseSupplier> {
            return localVarFp.getSupplierById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PageRequestDTO} pageRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupplierPage(pageRequestDTO: PageRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseIPageSupplier> {
            return localVarFp.getSupplierPage(pageRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Supplier} supplier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSupplier(id: number, supplier: Supplier, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseSupplier> {
            return localVarFp.updateSupplier(id, supplier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SupplierControllerApi - object-oriented interface
 * @export
 * @class SupplierControllerApi
 * @extends {BaseAPI}
 */
export class SupplierControllerApi extends BaseAPI {
    /**
     * 
     * @param {Supplier} supplier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplierControllerApi
     */
    public createSupplier(supplier: Supplier, options?: RawAxiosRequestConfig) {
        return SupplierControllerApiFp(this.configuration).createSupplier(supplier, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplierControllerApi
     */
    public deleteSupplier(id: number, options?: RawAxiosRequestConfig) {
        return SupplierControllerApiFp(this.configuration).deleteSupplier(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplierControllerApi
     */
    public getSupplierById(id: number, options?: RawAxiosRequestConfig) {
        return SupplierControllerApiFp(this.configuration).getSupplierById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PageRequestDTO} pageRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplierControllerApi
     */
    public getSupplierPage(pageRequestDTO: PageRequestDTO, options?: RawAxiosRequestConfig) {
        return SupplierControllerApiFp(this.configuration).getSupplierPage(pageRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Supplier} supplier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplierControllerApi
     */
    public updateSupplier(id: number, supplier: Supplier, options?: RawAxiosRequestConfig) {
        return SupplierControllerApiFp(this.configuration).updateSupplier(id, supplier, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AssignRolesToUserDTO} assignRolesToUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignRolesToUser: async (assignRolesToUserDTO: AssignRolesToUserDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignRolesToUserDTO' is not null or undefined
            assertParamExists('assignRolesToUser', 'assignRolesToUserDTO', assignRolesToUserDTO)
            const localVarPath = `/api/v1/users/assign-roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assignRolesToUserDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserCreateDTO} userCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (userCreateDTO: UserCreateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreateDTO' is not null or undefined
            assertParamExists('createUser', 'userCreateDTO', userCreateDTO)
            const localVarPath = `/api/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUser', 'id', id)
            const localVarPath = `/api/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserById', 'id', id)
            const localVarPath = `/api/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PageRequestDTO} pageRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPage: async (pageRequestDTO: PageRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageRequestDTO' is not null or undefined
            assertParamExists('getUserPage', 'pageRequestDTO', pageRequestDTO)
            const localVarPath = `/api/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageRequestDTO !== undefined) {
                for (const [key, value] of Object.entries(pageRequestDTO)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UserUpdateDTO} userUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (id: number, userUpdateDTO: UserUpdateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUser', 'id', id)
            // verify required parameter 'userUpdateDTO' is not null or undefined
            assertParamExists('updateUser', 'userUpdateDTO', userUpdateDTO)
            const localVarPath = `/api/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AssignRolesToUserDTO} assignRolesToUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignRolesToUser(assignRolesToUserDTO: AssignRolesToUserDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignRolesToUser(assignRolesToUserDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.assignRolesToUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserCreateDTO} userCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(userCreateDTO: UserCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseUserVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(userCreateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.createUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.deleteUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseUserVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.getUserById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PageRequestDTO} pageRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserPage(pageRequestDTO: PageRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseIPageUserVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserPage(pageRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.getUserPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UserUpdateDTO} userUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(id: number, userUpdateDTO: UserUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseUserVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(id, userUpdateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.updateUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {AssignRolesToUserDTO} assignRolesToUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignRolesToUser(assignRolesToUserDTO: AssignRolesToUserDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.assignRolesToUser(assignRolesToUserDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserCreateDTO} userCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(userCreateDTO: UserCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseUserVO> {
            return localVarFp.createUser(userCreateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.deleteUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseUserVO> {
            return localVarFp.getUserById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PageRequestDTO} pageRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPage(pageRequestDTO: PageRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseIPageUserVO> {
            return localVarFp.getUserPage(pageRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UserUpdateDTO} userUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(id: number, userUpdateDTO: UserUpdateDTO, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseUserVO> {
            return localVarFp.updateUser(id, userUpdateDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 
     * @param {AssignRolesToUserDTO} assignRolesToUserDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public assignRolesToUser(assignRolesToUserDTO: AssignRolesToUserDTO, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).assignRolesToUser(assignRolesToUserDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserCreateDTO} userCreateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public createUser(userCreateDTO: UserCreateDTO, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).createUser(userCreateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public deleteUser(id: number, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).deleteUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getUserById(id: number, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).getUserById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PageRequestDTO} pageRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getUserPage(pageRequestDTO: PageRequestDTO, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).getUserPage(pageRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UserUpdateDTO} userUpdateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public updateUser(id: number, userUpdateDTO: UserUpdateDTO, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).updateUser(id, userUpdateDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



